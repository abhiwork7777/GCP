pipeline {
    agent any

    parameters {
        string(name: 'GOOGLE_PROJECT_ID', defaultValue: 'idp-project-deploy', description: 'Google Project ID')
        string(name: 'CLUSTER_NAME', defaultValue: 'first-cluster', description: 'Name of the Cluster')
        string(name: 'REGION', defaultValue: 'us-central1-a', description: 'Region')
    }

    environment {
        HELM_HOME = "${env.HOME}/.helm"
        PATH = "${env.HELM_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Authenticate and Test') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'KEY_FILE_PATH')]) {
                    script {
                        sh '''
                        gcloud auth activate-service-account --key-file="$KEY_FILE_PATH"
                        gcloud version
                        '''
                    }
                }
            }
        }

        stage('Configure Kubernetes Credentials') {
            steps {
                script {
                    sh "gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${REGION} --project ${GOOGLE_PROJECT_ID}"
                }
            }
        }

        stage('Install Helm') {
            steps {
                script {
                    sh '''
                    if ! command -v helm &> /dev/null; then
                        echo "Helm not found, installing..."
                        curl -LO https://get.helm.sh/helm-v3.15.3-linux-amd64.tar.gz
                        tar -zxvf helm-v3.15.3-linux-amd64.tar.gz
                        mkdir -p ${HELM_HOME}/bin
                        mv linux-amd64/helm ${HELM_HOME}/bin/
                        chmod +x ${HELM_HOME}/bin/helm
                    else
                        echo "Helm is already installed."
                    fi
                    '''
                }
            }
        }

        stage('Add Helm Repositories') {
            steps {
                script {
                    sh '''
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                    helm repo add grafana https://grafana.github.io/helm-charts
                    helm repo update
                    '''
                }
            }
        }

        stage('Deploy Prometheus') {
            steps {
                script {
                    sh '''
                    helm install prometheus prometheus-community/prometheus \
                        --namespace monitoring --create-namespace \
                        --set server.service.type=LoadBalancer \
                        --set server.service.loadBalancerIP=34.57.200.11 \
                        --set server.service.port=80 \
                        --set server.service.targetPort=9090
                    '''
                }
            }
        }

        stage('Wait for Prometheus IP') {
            steps {
                script {
                    def retries = 0
                    def maxRetries = 30
                    def retryInterval = 20

                    while (retries < maxRetries) {
                        def externalIP = sh(script: "kubectl get svc prometheus-server -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}'", returnStdout: true).trim()

                        if (externalIP) {
                            echo "Prometheus is accessible at: http://${externalIP}:9090"
                            break
                        } else {
                            echo "Prometheus IP not assigned yet. Retrying in ${retryInterval} seconds..."
                            sleep retryInterval
                            retries++
                        }
                    }

                    if (retries == maxRetries) {
                        error "Failed to get external IP for Prometheus after ${maxRetries * retryInterval} seconds."
                    }
                }
            }
        }

        stage('Get Kubernetes Namespace') {
            steps {
                script {
                    sh 'kubectl get namespace'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
